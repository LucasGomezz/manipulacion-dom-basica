VARIABLES Y OPERACIONES
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

--¬øQu√© es una variable y para qu√© sirve?
Las variables son espacios en memoria donde podemos guardar informacion.Tipos de datos, funciones, etc.

--¬øCu√°l es la diferencia entre declarar e inicializar una variable?
Declarar es cuando le decimos js que creamos una variable .
Inicializar es darle un valor a la variable creada.

--¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
Cuando sumamos numeros hace la operacion y cuando lo utilizamos con strings une y concatena los strings

--¬øCu√°l operador me permite sumar o concatenar?
El operador que nos permite sumar o concatenar es "+"

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
Nombre                      :String
Apellido                    :String 
Nombre de usuario en Platzi :String
Edad                        :Number
Correo electr√≥nico          :String
Mayor de edad               :Boolean
Dinero ahorrado             :Number
Deudas                      :Number

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
let nombre = 'Lucas';
let apellido = 'Gomez Villa';
let username = 'lucassgv';
let edad = 22;
let email = 'platzi@example.com';
let esMayorDeEdad = true;
let dineroAhorrado = 10000;
let deudas = 100;


4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
let nombreCompleto = nombre + ' ' + apellido;

Dinero real (dinero ahorrado menos deudas)
let dineroReal = dineroAhorrado - deudas;

FUNCIONES

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

--¬øQu√© es una funci√≥n?
Las funciones nos permiten encapsular bloques de codigo para reutilizarlos y ejecutarlos en el futuro.

--¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
Nos sirve cuando tenemos bloques de codigo parecidos.
Tambien sirve para ordenar y mejorar la legibilidad del codigo

--¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
Los parametros son los que recibe una funcion cuando la estamos creando.Pero cuando las ejecutamos le enviamos argumentos a la funcion

2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

function saludo(name, lastName, nickName){
    const completeName = name + lastName;
    let username = nickName;

    console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + username + ".");
}

CONDICIONALES
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

--¬øQu√© es un condicional?
Son la forma en que ejecutamos un bloque de codigo u otro dependiendo de alguna condicion

--¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
Existen distintos tipos:
IF(else y else if), Switch



--¬øPuedo combinar funciones y condicionales?
Si

2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:
const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

const tipoDeSuscripcion = "Basic";

if(tipoDeSuscripcion == "Free"){
    console.log("Solo puedes tomar los cursos gratis");
} else if(tipoDeSuscripcion == "Basic"){
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} else if (tipoDeSuscripcion == "Expert"){
    console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} else if (tipoDeSuscripcion == "ExpertPlus"){
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
} else {
    console.log("El valor ingresado es incorrecto");
}

3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè
const tipoDeSuscripciones = {
    free:  "Solo puedes tomar los cursos gratis",
    basic: "Puedes tomar casi todos los cursos de Platzi durante un mes",
    expert: "Puedes tomar casi todos los cursos de Platzi durante un a√±o",
    expertduo: "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"
};

function conseguirTipoSuscripcion(suscripcion) {
    if(tipoDeSuscripciones[suscripcion]) {
        console.log(tipoDeSuscripciones[suscripcion])
        return;
    } else {
        console.warn('Ese tipo no existe');
    }
}

CICLOS
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

--¬øQu√© es un ciclo?
Es la forma de ejecutar un bloque de codigo hasta que se cumple cierta condicion

--¬øQu√© tipos de ciclos existen en JavaScript?
while, for, do while

--¬øQu√© es un ciclo infinito y por qu√© es un problema?
Un ciclo infinito es cuando no se cumple la condicion entonces sigue ejecutandose infinitas veces el ciclo


--¬øPuedo mezclar ciclos y condicionales?
Si se puede

2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

let i = 0;

while (i < 5){
    console.log("El valor de i es: " + i);
    i++;
}
let j = 10;
while(j >= 2){
    console.log("El valor de i es: " + j);
    j--;
}

3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.
while(respuesta != '4') {
    let pregunta = prompt('¬øCuanto es 2 + 2?');
    respuesta = pregunta;
}

LISTAS
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
--¬øQu√© es un array?
Es una lista de elementos

--¬øQu√© es un objeto?
Es una lista de elementos pero cada elemento tiene un nombre clave
const obj = {
    nombre: 'fulnito',
    edad: 3
};

--¬øCu√°ndo es mejor usar objetos o arrays?
Arrays cunado lo que aharemos en un elemento es lo mismo que en todos los demas(la regla se puede incumplir).Mientra que un objeto cuando los nombres de cada elamento son importantes para nuestro algoritmo

--¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
Si, los arrays pueden guardar objetos y viceversa

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

function primerResultado (arr){
    console.log(arr[0]);
}

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

function imprimirElementoPorElemento (arr){
    for(i= 0 ; i < arr.length;i++){
        console.log(arr[i]);
    }
}
4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

function imprimirElementoPorElementoObjeto(obj) {
    const arr = Object.values(obj);
    for (let i = 0;i < arr.length; i++) {
        console.log(arr[i]);
    }
}